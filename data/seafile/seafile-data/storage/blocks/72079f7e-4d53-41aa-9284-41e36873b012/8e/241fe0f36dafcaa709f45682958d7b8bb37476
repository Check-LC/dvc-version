
![](attachments/Pasted%20image%2020240814174502.png)

前情提要：
  具有一个如图的 jaeger 后端
![](attachments/Pasted%20image%2020240820120110.png)
## Otel  Operator 资源创建和使用

- otelcol (mode: daemonset)

```
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otelcol-demo1
spec:
  mode: sidecar
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s

    exporters:
      otlp: 
        endpoint: jaeger-collector.opentelemetry:4317
        tls:
          insecure: true

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlp]
```

>[! important] 
>基于以上的 exporter，需要首先给 jaeger 的 collector 开启 otlp-grpc，4317 端口  
>在 jaeger helm 中打开注释即可  

- 再次创建的 otelcollector

```
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otelcol-sidecar
spec:
  mode: sidecar
  config: |
    receivers:
      jaeger:
        protocols:
          thrift_compact:
      otlp:
        protocols:
          http:
          grpc:
    processors:
      batch:
    exporters:
      logging:
      otlp:
        endpoint: http://jaeger-collector.opentelemetry.svc.cluster.local:4317
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [jaeger, otlp]
          processors: [batch]
          exporters: [logging, otlp]
```

- instrumentation (example for go)

```
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: instrumentation-demo-py
spec:
  exporter:
    endpoint: http://otelcol-demo1.otel:4318
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_always_on
  python:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:latest
```


`sampler:
    type: parentbased_traceidratio `

- 再次创建的 instrumentation

```
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: instrumentation-sidecar
spec:
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_always_on
  python:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:latest
```

- 无需 sidecar 的 instrumentation

```
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: instrumentation-nosidecar
spec:
  exporter:
    endpoint: http://jaeger-collector.opentelemetry.svc.cluster.local:4317
  propagators:
    - tracecontext
    - baggage
    - b3
  sampler:
    type: parentbased_traceidratio
    argument: "0.25"
  java:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:latest
  nodejs:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-nodejs:latest
  python:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:latest
  dotnet:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-dotnet:latest
```


## OTEL collector 例子解释
如果在 OTEL Collector 中使用 OTLP 协议,可以同时将多种遥测数据(指标、日志和跟踪)发送到不同的后端系统,如 Prometheus、Loki 和 Jaeger。
OTEL Collector 支持配置多个 Receiver、Processor 和 Exporter,可以灵活地组合不同的组件来实现数据流转。具体步骤如下:

1. 在 OTEL Collector 配置文件中,配置 OTLP Receiver 来接收来自客户端的 OTLP 数据:

```yaml
receivers:
  otlp:
    protocols:
      grpc:
      http:
```

2. 添加相应的 Exporter 组件,将数据发送到 Prometheus、Loki 和 Jaeger:

```yaml
exporters:
  prometheus:
    endpoint: "localhost:9090"
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"
  jaeger:
    endpoint: "http://jaeger:14250"
    tls:
      insecure: true
```

3. 配置 Pipelines 将 Receiver 的数据流向不同的 Exporter:

```yaml
service:
  pipelines:
    metrics:
      receivers: [otlp]
      exporters: [prometheus]
    logs:
      receivers: [otlp] 
      exporters: [loki]
    traces:
      receivers: [otlp]
      exporters: [jaeger]
```

通过这样的配置,OTEL Collector 就可以同时将指标、日志和跟踪数据发送到 Prometheus、Loki 和 Jaeger 等不同的观测平台。这种灵活的架构有助于构建可观测性解决方案,满足不同监控需求。


## 问题
创建相应的多个资源之后，没有成功将任何数据发送到后端
1. 程序不支持自动埋点检测，所以无数据生成
2. jaeger 后端连接失败
3. otelcollector 创建不正确