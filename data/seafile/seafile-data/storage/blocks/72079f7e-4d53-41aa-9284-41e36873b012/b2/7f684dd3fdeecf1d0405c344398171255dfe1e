## 1. 介绍
[官方手册](https://www.openldap.org/doc/admin26/guide.html)\
常用属性：
- DIT=Directory Information Tree, 目录信息树，每个 domain entry 的数据存储，包含所有dn，为树形结构
- DN=Distinguished Name，LDAP记录项的标识，有唯一性，例如：dc:"cn=admin,ou=developer,dc=163,dc=com"  
- dc= DomainComponent 为域组件，域名的一部分
- cn=CommonName 为记录名，表示一个实体，最长到80个字符，可以为中文；
- ou=OrganizationUnit 为组织单位，用于分类，最多四级，每级最长32字符，可以为中文；
- uid=User id 为用户的唯一标识
- c=Country 为国家名，可选，为2个字符长
- O=Organization 为组织名，可选，可以 3—64 个字符长

>[!info] 区分两个重要文件
>1. `slapd.conf` 文件：
>    - `slapd.conf` 是 OpenLDAP 服务器的主要配置文件，用于配置 OpenLDAP 服务器的全局设置、后端数据库、访问控制规则等。
>    - 通过编辑 `slapd.conf` 文件，您可以配置 OpenLDAP 服务器的全局设置，例如监听的端口、TLS 设置、数据库定义、访问控制规则等。
>    - 这个文件通常包含了服务器的全局配置信息，是对 OpenLDAP 服务器进行全面配置的主要途径。
>2. LDIF 文件：
>    - LDIF（LDAP Data Interchange Format）文件是一种文本文件格式，用于在 LDAP 目录中添加、修改、删除条目。
>    - 通过编辑 LDIF 文件，您可以定义要添加到 LDAP 目录中的条目，包括条目的 DN（Distinguished Name）、对象类、属性等信息。
>    - LDIF 文件通常用于初始化 LDAP 目录，添加初始条目、修改现有条目或删除条目。
>
>但是本项目基于当前基于 Ldif 文件管理
>Slapd. Conf 配置不能热加载  `rm` `-rf` `/etc/openldap/slapd``.d/*` && `slapd ` 这样启服务
## 2. 安装
### 2.1 命令
```bash TI:"执行安装并配置"
sudo apt install  -y slapd ldap-utils
sudo dpkg-reconfigure slapd   # 主要配置密码 (密码在下一步重置，便于配置连接)，DNS domain name(即 LDAP 服务中的 base dn)
说明：
	第一步回答 No
	第二步填写域名，比如 mycompany.com
	第三步填写组织名，比如 Company
	第四步填写管理员密码，比如 secret；第五步确认管理员密码
	第六步选择使用的数据库后端，比如 MDB
	第七步选择在清除 slapd 时是否移除数据库，比如 Yes
	第八步选择是否移除旧数据库，比如 Yes
```
### 2.2 自定义 admin 密码
- 将对以下数据库修改RootDN用户的密码做修改
```ldif
/etc/ldap/slapd.d/cn\=config/olcDatabase\=\{1\}mdb.ldif
	olcDatabase: {1}mdb
	olcSuffix: dc=inboc,dc=top
	olcRootDN: cn=admin,dc=inboc,dc=top
	olcRootPW: {SSHA}UiIUaWLBYOo+2O88GNxFAdzp5M9cmlWi
```
- olcDatabase: 定义使用的后端数据存储格式,遵循默认
- olcSuffix: 设置 LDAP 服务的根
- olcRootDN: 设置管理员用户的 dn
- olcRootPW: 管理员用户的密码
```Ldif  TI:"需要创建的目标文件,在任意路径均可"
dn: olcDatabase={1}mdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: 123456    # 明文，保存在数据库文件中的时候将会被加密
```
执行命令
```bash
ldapmodify  -Y  EXTERNAL  -H  ldapi:///  -f  passmodify.ldif  
# 当修改配置在数据库中的 rootdn 的密码只能以此命令修改生效
```
### 2.3 创建架构
在OpenLDAP中，所有的操作都依赖于 'ldif' 文件和 ldap 命令管理
常见的管理工具有LDAP Account Manager、LDAP Admin
#### 2.3.1 新增
```Ldif
dn: ou=inboc,dc=inboc,dc=net  
objectclass: organizationalUnit  
ou: inboc

dn: ou=inboc-bod,ou=inboc,dc=inboc,dc=net
objectclass: organizationalUnit
ou: inboc-bod

dn: cn=yu.zheng,ou=inboc-bod,ou=inboc,dc=inboc,dc=net
cn: yu.zheng
departmentnumber: 1
displayname: Zheng Yu
mail: yu.zheng@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
givenName: Yu
sn: Zheng
title: President
uid: yu.zheng
uidNumber: 10000
gidNumber: 10010
homeDirectory: /home/yu.zheng
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=inboc-bod-admin,ou=inboc-bod,ou=inboc,dc=inboc,dc=net
cn: inboc-bod-admin
member: cn=yu.zheng,ou=inboc-bod,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames

dn: ou=inboc-bus,ou=inboc,dc=inboc,dc=net
objectclass: organizationalUnit
ou: inboc-bus

dn: cn=minghong.sun,ou=inboc-bus,ou=inboc,dc=inboc,dc=net
cn: minghong.sun
departmentnumber: 2
displayname: Sun Minghong
mail: minghong.sun@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
givenName: Minghong
sn: Sun
title: Financial Manager
uid: minghong.sun
uidNumber: 10001
gidNumber: 10010
homeDirectory: /home/minghong.sun
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=inboc-bus-admin,ou=inboc-bus,ou=inboc,dc=inboc,dc=net
cn: inboc-bus-admin
member: cn=minghong.sun,ou=inboc-bus,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames

dn: ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
objectclass: organizationalUnit  
ou: inboc-sys

dn: cn=jian.xie,ou=inboc-sys,ou=inboc,dc=inboc,dc=net
cn: jian.xie
departmentnumber: 3
displayname: Xie Jian
mail: jian.xie@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
givenName: jian
sn: Xie
title: Senior Systems Engineer
uid: jian.xie
homeDirectory: /home/jian.xie
uidNumber: 10002
gidNumber: 10010
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=inboc-sys-admin,ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
cn: inboc-sys-admin  
member: cn=jian.xie,ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
objectclass: groupOfNames

dn: cn=chao.long,ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
cn: chao.long  
departmentnumber: 3  
displayname: Long Chao  
mail: chao.long@inboc.net  
objectclass: inetOrgPerson
objectclass: posixAccount
sn: Long 
givenName: Chao
title: System Engineer  
uid: chao.long
uidNumber: 10003  
gidNumber: 10010
homeDirectory: /home/chao.long
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs  
  
dn: cn=inboc-sys-junior,ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
cn: inboc-sys-junior  
member: cn=chao.long,ou=inboc-sys,ou=inboc,dc=inboc,dc=net  
objectclass: groupOfNames

dn: ou=inboc-ops,ou=inboc,dc=inboc,dc=net
objectclass: organizationalUnit
ou: inboc-ops

dn: cn=binchao.tang,ou=inboc-ops,ou=inboc,dc=inboc,dc=net
cn: binchao.tang
departmentnumber: 4
displayname: Tang Binchao
mail: binchao.tang@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
sn: Tang
givenName: Binchao
title: System Engineer
uid: binchao.tang
uidNumber: 10004
gidNumber: 10010
homeDirectory: /home/binchao.tang
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=inboc-ops-admin,ou=inboc-ops,ou=inboc,dc=inboc,dc=net
cn: inboc-ops-admin
member: cn=binchao.tang,ou=inboc-ops,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames

dn: ou=inboc-dev,ou=inboc,dc=inboc,dc=net
objectclass: organizationalUnit
ou: inboc-dev

dn: cn=cheng.chen,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
cn: cheng.chen
departmentnumber: 5
displayname: Chen Cheng
mail: cheng.chen@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
sn: Chen
givenName: Cheng
title: Senior Development Engineer
uid: cheng.chen
uidNumber: 10005
gidNumber: 10010
homeDirectory: /home/cheng.chen
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=inboc-dev-admin,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
cn: inboc-dev-admin
member: cn=cheng.chen,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames

dn: cn=xiaofeng.li,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
cn: xiaofeng.li
departmentnumber: 5
displayname: Li Xiaofeng
mail: xiaofeng.li@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
sn: Li
givenName: Xiaofeng
title: Development Engineer
uid: xiaofeng.li
uidNumber: 10006
gidNumber: 10010
homeDirectory: /home/xiaofeng.li
loginShell: /bin/bash
userpassword: {SSHA}W4DSQvcToeOeTJB+6W5fCZmz4PqrmwQs

dn: cn=xujun.luo,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
cn: xujun.luo
departmentnumber: 5
displayname: Luo Xujun
mail: xujun.luo@inboc.net
objectclass: inetOrgPerson
objectclass: posixAccount
sn: Luo
givenName: Xujun
title: Development Engineer
uid: xujun.luo
uidNumber: 10007
gidNumber: 10010
homeDirectory: /home/xujun.luo
loginShell: /bin/bash
userpassword: {SSHA}/2+Coei5Fje+th7mOJgu43Ms3hBia2Qu

dn: cn=inboc-dev-senior,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
cn: inboc-dev-senior
member: cn=xiaofeng.li,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
member: cn=xujun.luo,ou=inboc-dev,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames

dn: cn=domain user,ou=posixgroup,dc=inboc,dc=net   
objectClass: posixGroup                        # in ldap , the posixgroup  & posixaccount is the user and group in linux sys.     
cn: domain user                                     # using ldap to authenticate and create accounts on linux_sys are suppposed to           
gidNumber: 10010                   # create the both above
```

```bash
ldapadd -Y EXTERNAL -H ldapi:/// -f testuser.ldif
或
ldapmodify -a  -Y EXTERNAL -H ldapi:/// -f testuser.ldif
```
#### 2.3.2 对已经存在的 dn 有新增属性的需求
```ldif
dn: cn=san.li,ou=external-sys,ou=external,dc=ibswufe,dc=com
changetype: modify
add: objectClass
objectClass: posixAccount
-
add: givenName
givenName: San
-
add: uidNumber
uidNumber: 10007
-
add: gidNumber
gidNumber: 10010
-
add: homeDirectory
homeDirectory: /home/san.li
-
add: loginShell
loginShell: /bin/bash
```
#### 2.3.3 如果对已经存在的 dn 有修改需求
```ldif
dn: cn=san.li,ou=external-sys,ou=external,dc=ibswufe,dc=com
changetype: modify
add: uidNumber
uidNumber: 10000
```
#### 2.3.4 删除
```ldif
dn: olcDatabase={2}mdb,cn=config
delete: olcAccess
olcAccess: {0}to attrs=userPassword by self write by dn.base="cn=administrator ,dc=inboc,dc=net" write by anonymous auth by * none

# 或者删除整个 dn
dn: ou=inboc-ref,ou=inboc,dc=inboc,dc=net
changetype: delete
```
#### 2.3.5 执行命令并指向以上文件使其生效
```
ldapmodify  -Y EXTERNAL -H ldapi:/// -f a.ldif
```
### 2.4 命令介绍
> [ 来自此处](https://blog.csdn.net/jenyzhang/article/details/56487627) ldap  
> |-slapd             目录服务的主要程序  
> |-slurpd           目录服务进行复制的程序  
> |-slapadd           向目录中添加数据  
> |-slapcat           把目录中的条目导出成ldif文件  
> |-slapindex         重建目录的索引  
> |-ldapcompare       对目录的条目的属性进行比较  
> |-ldapadd           向目录服务中添加条目  
> |-ldapdelete        删除目录中的条目  
> |-ldapmodify        更新目录中条目的值  
> |-ldapmodrdn        更改条目的DN  
> |-ldappasswd        更改条目的密码  
> |-ldapsearch        对目录进行查询

> ldapadd  
> -x   进行简单认证  
> -D   用来绑定服务器的DN  
> -h   目录服务的地址  
> -w   绑定DN的密码  
> -f   使用ldif文件进行条目添加的文件

- 例子\
    ldapadd -x -D "cn=root,dc=starxing,dc=com" -w secret -f /root/test.ldif  
    ldapadd -x -D "cn=root,dc=starxing,dc=com" -w secret (这样写就是在命令行添加条目)

> ldapsearch  
> -x   进行简单认证  
> -D   用来绑定服务器的DN  
> -w   绑定DN的密码  
> -b   指定要查询的根节点  
> -H   制定要查询的服务器       -s 指定搜索范围的类型

- 例子 \
    ldapsearch -x -D "cn=root,dc=starxing,dc=com" -w secret -b "dc=starxing,dc=com"  
    使用简单认证，用 "cn=root,dc=starxing,dc=com" 进行绑定，  
    要查询的根是 "dc=starxing,dc=com"。这样会把绑定的用户能访问"dc=starxing,dc=com"下的所有数据显示出来。 ldapsearch -x -W -D "cn=administrator,cn=users,dc=osdn,dc=zzti,dc=edu,dc=cn" -b "cn=administrator,cn=users,dc=osdn,dc=zzti,dc=edu,dc=cn" -h troy.osdn.zzti.edu.cn ldapsearch -b "dc=canon-is,dc=jp" -H ldaps://192.168.0.92:636 
    (需要修改openldap客户端的配置文件ldap.conf,参考：[http://ms.ntcb.edu.tw/~steven/l-penguin.s/article/ldap-5.htm](http://ms.ntcb.edu.tw/~steven/l-penguin.s/article/ldap-5.htm))

> ldapdelete
```
  ldapdelete -x -D 'cn=root,dc=it,dc=com' -w secert 'uid=zyx,dc=it,dc=com'  
```
    这样就可以删除'uid=zyx,dc=it,dc=com'记录了，应该注意一点，其下有子条目的不能删除  

- 例子1 递归删除所有： ldapdelete -x -D 'cn=administrator,dc=inboc,dc=net' -w Inboc@2020 -r "ou=inboc,dc=inboc,dc=net"
    
- 例子2 删除一个acl策略。
```acl-dele.ldif
  dn: olcDatabase={3}mdb,cn=config
  delete: olcAccess
  olcAccess: {2}...
  olcAccess: {3}...
  olcAccess: {4} ...

ldapmodify -Y EXTERNAL -H ldapi:/// -f acl-dele.ldif
```
> ldappasswd  
> -x   进行简单认证  
> -D   用来绑定服务器的DN  
> -w   绑定DN的密码  
> -S   提示的输入密码  
> -s pass 把密码设置为pass  
> -a pass 设置old passwd为pass  
> -A   提示的设置old passwd  
> -H   是指要绑定的服务器  
> -I   使用sasl会话方式

- 例子     ldappasswd -x -D 'cm=root,dc=it,dc=com' -w secret 'uid=zyx,dc=it,dc=com' -S  
    New password:  
    Re-enter new password:  
    就可以更改密码了，如果原来记录中没有密码，将会自动生成一个userPassword。

> ldapmodify  
> -a 添加新的条目.缺省的是修改存在的条目.  
> -C 自动追踪引用.  
> -c 出错后继续执行程序并不中止.缺省情况下出错的立即停止.比如如果你的ldif 文件内的某个条目在[数据库](http://lib.csdn.net/base/mysql "MySQL知识库")内并不存在,缺省情况下程序立即退出,但如果使用了该参数,程序忽略该错误继续执行.  
> -n 用于调试到服务器的通讯.但并不实际执行搜索.服务器关闭时,返回错误；服务器  
> 打开时,常和-v 参数一起[测试](http://lib.csdn.net/base/softwaretest "软件测试知识库")到服务器是否是一条通路.  
> -v 运行在详细模块.在标准输出中打出一些比较详细的信息.比如:连接到服务器的  
> ip 地址和端口号等.  
> -M 打开 manage DSA IT 控制. -MM 把该控制设置为重要的.  
> -f file 从文件内读取条目的修改信息而不是从标准输入读取.  
> -x 使用简单认证.  
> -D binddn 指定搜索的用户名(一般为一dn 值).  
> -W 指定了该参数,系统将弹出一提示入用户的密码.它和-w 参数相对使用.  
> -w bindpasswd 直接指定用户的密码. 它和-W 参数相对使用.  
> -H ldapuri 指定连接到服务器uri(ip 地址和端口号,常见格式为 ldap://hostname:port ).如果使用了-H 就不能使用-h 和-p 参数.  
> -h ldaphost 指定要连接的主机的名称/ip 地址.它和-p 一起使用     -p ldapport 指定要连接目录服务器的端口号.它和-h 一起使用，如果使用了-h 和-p 参数就不能使用-H 参数.  
> -Z 使用StartTLS 扩展操作.如果使用-ZZ,命令强制使用StartTLS 握手成功.  
> -V 启用证书认证功能,目录服务器使用客户端证书进行身份验证,必须与-ZZ 强制启用  
> TLS 方式配合使用,并且匿名绑定到目录服务器.  
> -e 设置客户端证书文件,例: -e cert/client.crt  
> -E 设置客户端证书私钥文件,例: -E cert/client.key

- 例子\
  ` ldapmodify -x -D "cn=root,dc=it,dc=com" -W -f modify.ldif  ` #  将modify.ldif中的记录更新原有的记录。
## 3. 多域管理(Multiple DITs)
### 3.1 创建第二个Directory Information Tree
#### 3.1.1 准备存储路径，并通过 apparmor 做限制
```bash
mkdir  /var/lib/ldap2
chown openldap:openldap  /var/lib/ldap2
vim /etc/apparmor.d/usr.sbin.slapd
		# the databases and logs
		/var/lib/ldap2/ r,
		/var/lib/ldap2/** rwk,
		
		# lock file
		/var/lib/ldap2/alock kw,

sudo systemctl  reload  apparmor 
```
#### 3.1.2 准备 ldif 文件（可以自定义路径）
```ldif
dn: olcDatabase={2}mdb,cn=config
changetype: add
objectClass: olcDatabaseConfig
objectClass: olcMdbConfig
olcDbDirectory: /var/lib/ldap2/
olcDatabase: {2}Mdb
olcDbIndex: objectClass
olcDbIndex: cn,uid
olcDbIndex: uidNumber,gidNumber
olcDbIndex: member,memberUid
olcLastMod: TRUE
olcMonitoring: TRUE
olcDBNoSync: TRUE
olcAccess: {0}to attrs=userPassword by self write by anonymous auth by * none
olcAccess: {1}to attrs=shadowLastChange by self write by * read
olcSuffix: dc=inboc,dc=tech
olcRootDN: cn=admin,dc=inboc,dc=tech
olcRootPW: {SSHA}UiIUaWLBYOo+2O88GNxFAdzp5M9cmlWi
```

```
sudo  ldapmodify -Y EXTERNAL -H ldapi:/// -f domian2.ldif
```
#### 3.1.3 新增并设置管理员
```
-
dn: cn=admin,dc=inboc,dc=tech
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: admin
userPassword: {SSHA}UiIUaWLBYOo+2O88GNxFAdzp5M9cmlWi
==========================
# 以下是playbook中模板文件
-
dn: cn=admin,{{ item.base_dn }}  
changetype: add  
objectClass: simpleSecurityObject  
objectClass: organizationalRole  
cn: admin  
userPassword: {SSHA}UiIUaWLBYOo+2O88GNxFAdzp5M9cmlWi
```
执行创建
```
sudo ldapadd -x -D "cn=admin,dc=inboc,dc=tech" -w Inboc@2020 -f basedn2.ldif
```
3.1.4 通过 ACL 管理跨域访问
- 设置一个全权限的 acl ，跨域访问，相应的用户需已经提前创建
```
让这个dn 用户: cn=user.tech,dc=inboc,dc=tech ;  可以阅读这个base dn : dc=inboc,dc=top 下的所有条目.
对应关系：数据库----{1}mdb  存储的数据是来自 dn: dc=inboc,dc=top 。即，对谁的访问则将 acl 添加在谁的库下  

dn: olcDatabase={1}mdb,cn=config
changetype: modify
add: olcAccess
olcAccess: {2}to dn.subtree="dc=inboc,dc=top" by dn.base="cn=user.tech,dc=inboc,dc=tech" read
```
执行创建
```
ldapmodify   -Y   EXTERNAL   -H   ldapi:///   -f  xxx
```
3.1.5 ACL 验证
```bash
root@inboc-sys-test-06:/etc/ldap/inboc# ldapsearch -x -b "dc=inboc,dc=top" -D "cn=user.tech,dc=inboc,dc=tech" -w Inboc@2020
		# extended LDIF
		# LDAPv3
		# base <dc=inboc,dc=top> with scope subtree
		# filter: (objectclass=*)
		# requesting: ALL
		# inboc.top
		dn: dc=inboc,dc=top
		objectClass: top
		objectClass: domain
		dc: inboc
		
		# admin, inboc.top
		dn: cn=admin,dc=inboc,dc=top
		objectClass: simpleSecurityObject
		objectClass: organizationalRole
		cn: admin
		
		# search result
		search: 2
		result: 0 Success
		
		# numResponses: 3
		# numEntries: 2
root@inboc-sys-test-06:/etc/ldap/inboc# ldapsearch -x -b "dc=inboc,dc=tech" -D "cn=admin,dc=inboc,dc=top" -w Inboc@2020
		# extended LDIF
		#
		# LDAPv3
		# base <dc=inboc,dc=tech> with scope subtree
		# filter: (objectclass=*)
		# requesting: ALL		
		# search result
		search: 2
		result: 32 No such object
		# numResponses: 1
```
- 测试的日志
```
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 fd=12 ACCEPT from IP=127.0.0.1:59834 (IP=0.0.0.0:389)
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=0 BIND dn="cn=user.tech,dc=inboc,dc=tech" method=128
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=0 BIND dn="cn=user.tech,dc=inboc,dc=tech" mech=SIMPLE ssf=0
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=0 RESULT tag=97 err=0 text=
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=1 SRCH base="dc=inboc,dc=top" scope=2 deref=0 filter="(objectClass=*)"
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=1 SEARCH RESULT tag=101 err=0 nentries=2 text=
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 op=2 UNBIND
Sep 15 14:18:54 inboc-sys-test-06 slapd[10052]: conn=1097 fd=12 closed
=================
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 fd=12 ACCEPT from IP=127.0.0.1:34916 (IP=0.0.0.0:389)
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=0 BIND dn="cn=admin,dc=inboc,dc=top" method=128
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=0 BIND dn="cn=admin,dc=inboc,dc=top" mech=SIMPLE ssf=0
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=0 RESULT tag=97 err=0 text=
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=1 SRCH base="dc=inboc,dc=tech" scope=2 deref=0 filter="(objectClass=*)"
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=1 SEARCH RESULT tag=101 err=32 nentries=0 text=
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 op=2 UNBIND
Sep 15 14:19:14 inboc-sys-test-06 slapd[10052]: conn=1098 fd=12 closed
```
## 4. 配置服务器主从
镜像复制，互为主从。[参考和介绍]([darkdark.top](https://darkdark.top/ch5-replication.html))
### 4.1 为某域编辑 mirrorsync.ldif
```
dn: cn=module,cn=config         # 此段配置加载s ync 模块
objectClass: olcModuleList
cn: module
olcModulePath: /usr/lib/ldap
olcModuleLoad: syncprov.la     # 此配置和上一句，实际是在请求这个路径的文件，/usr/lib/ldap/syncprov.la，不确定的可 find 查找

-
dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config        
	 # 此处需确认自己的数据库，{2}hdb--为旧版本默认 / {1}mdb--为新版本默认。路径 /etc/ldap/slapd.d/cn\=config/olcDatabase\=\{1\}mdb.ldif
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpSessionLog: 100

-
dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 0                                        # 用于标识本机的 server id

dn: olcDatabase={1}mdb,cn=config      # 以下配置用于开启复制，指定主服务器
changetype: modify
add: olcSyncRepl
olcSyncRepl: rid=000                             # 标识唯一的 replica id
  provider=ldaps://ldap01.inboc.top       # 看上述记录介绍参数
  bindmethod=simple
  binddn="cn=admin,dc=inboc,dc=top"
  credentials=Inboc@2020
  searchbase="dc=inboc,dc=top"
  tls_reqcert=allow
  scope=sub
  schemachecking=on
  type=refreshAndPersist
  retry="30 5 300 3"
  interval=00:00:05:00
-
add: olcMirrorMode                        # 开启 mirror mode
olcMirrorMode: TRUE
```
### 4.2 ldap01.inboc.top下编辑 mirrorsync.ldif
```
dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModulePath: /usr/lib/ldap
olcModuleLoad: syncprov.la

-
dn: olcOverlay=syncprov,olcDatabase={1}mdb,cn=config
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpSessionLog: 100

-
dn: cn=config
changetype: modify
replace: olcServerID
olcServerID: 1

dn: olcDatabase={1}mdb,cn=config
changetype: modify
add: olcSyncRepl
olcSyncRepl: rid=001
  provider=ldaps://ldap.inboc.top
  bindmethod=simple
  binddn="cn=admin,dc=inboc,dc=top"
  credentials=Inboc@2020
  searchbase="dc=inboc,dc=top"
  tls_reqcert=allow
  scope=sub
  schemachecking=on
  type=refreshAndPersist
  retry="30 5 300 3"
  interval=00:00:05:00
-
add: olcMirrorMode
olcMirrorMode: TRUE
```
#### 4.2.1 加载配置
```
ldapadd -Y EXTERNAL -H ldapi:/// -f mirrorsync.ldif
```
## 5. 使用权威证书配置 TLS
- 将新的 CA 根证书添加到受信任 CA 列表（客户端操作，使用权威证书则不需要拷贝）
```
sudo   cp   _.inboc.top-chain.pem   /usr/local/share/ca-certificates/mycacert.crt
sudo update-ca-certificates
```
- 准备服务器证书和私钥（服务端）
```
 ls /etc/ldap/cert
     _.inboc.top-crt.pem   _.inboc.top-key.pem
sudo chgrp openldap /etc/ldap/cert/*
sudo chmod 0640 /etc/ldap/cert/*
```
- 明确证书路径
```Ldif   TI:"certinfo.ldif"
dn: cn=config
changetype: modify
# replace: olcTLSCACertificateFile
# olcTLSCACertificateFile: /etc/ssl/certs/mycacert.pem
-
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/ldap/ca.pem
-
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/ldap/ca-key.pem
```
执行命令
```
sudo ldapadd  -Y   EXTERNAL  -H  ldapi:///   -f    certinfo.ldif
```
>[!Error]
>当配置在{1}mdb. Ldif，报错'no global superior knowledge'\
>Modifying entry "cn=config"\
>Ldap_modify: Constraint violation (19)\
>Additional info: attribute 'olcTLSCertificateFile' cannot have multiple values\

>[!Error] 全局配置失败\
>SASL/EXTERNAL authentication started\
>SASL username: gidNumber=0+uidNumber=0, cn=peercred, cn=external, cn=auth\
>SASL SSF: 0\
>Modifying entry "cn=config"\
>ldap_modify: Other (e.g., implementation specific) error (80)

>[!Solution]
>恢复快照后，执行已经修改的 playbook，tls. Pem 依次设置权限如下，保证可读和最终文件的权限正确，否则不读 \
> ```bash HL:"1,12"
> ll inboc/
Total 20
drwxr-xr-x 3 root root  137 Feb  1 11:10 ./
drwxr-xr-x 6 root root   78 Feb  1 11:11 ../
drwxr-xr-x 2 root root   43 Feb  1 11:08 cert/
-rw-r--r-- 1 root root  301 Feb  1 11:08 certinfo. Ldif
-rw-r--r-- 1 root root  570 Feb  1 11:08 config. Ldif
-rw-r--r-- 1 root root 1598 Feb  1 11:10 inboc-domain. Ldif
-rw-r--r-- 1 root root  828 Feb  1 11:10 mirrorsync-inboc. Ldif
-rw-r--r-- 1 root root 3989 Feb  1 11:10 organization. Ldif
>
 ll inboc/cert
Total 12
drwxr-xr-x 2 root root       43 Feb  1 11:08 ./
drwxr-xr-x 3 root root      137 Feb  1 11:10 ../
-rw-r----- 1 root openldap 5514 Feb  1 11:08 tls_ca. Pem
-rw-r----- 1 root openldap 1679 Feb  1 11:08 tls_key. Pem
> ```
- 启用 ldaps，重启 slapd
```
/etc/default/slapd
	SLAPD_SERVICES="ldap:/// ldapi:/// ldaps:///"
```
>[!Error] 两次tls连接日志
>Feb  1 11:16:40 test-sys-lab-10 slapd[4318]: conn=1007 fd=14 ACCEPT from IP=10.8.0.88:34186 (IP=0.0.0.0:636)\
>Feb  1 11:16:40 test-sys-lab-10 slapd[4318]: conn=1007 fd=14 closed (TLS negotiation failure)\
>===================\
>Feb  1 11:16:49 test-sys-lab-10 slapd[4318]: conn=1008 fd=14 ACCEPT from IP=10.8.0.88:54692 (IP=0.0.0.0:636)\
>Feb  1 11:16:49 test-sys-lab-10 slapd[4318]: conn=1008 fd=14 TLS established tls_ssf=256 ssf=256 tls_proto=TLS 1.3 tls_cipher=AES-256-GCM\
>Feb  1 11:16:49 test-sys-lab-10 slapd[4318]: conn=1008 fd=14 closed (connection lost)\


>[!solution]
>不能合并或者同时添加两个证书，签发混合域证书。

- 增添配置文件，这是客户端需要连接 ldap 服务器使用的配置。对于服务端可以忽略。
```Ldif  TI:"/etc/ldap/ldap.conf"
BASE       dc=inboc,dc=top                                                      # LDAP服务的基础DN
[[URI]] ldap://localhost:389 ldaps://localhost:636                        # 指定LDAP服务器的连接地址，似乎不起作用
[[SIZELIMIT]]  12                                                                      # 搜索结果的数量限制
[[TIMELIMIT]]  15                                                                     # 最长搜索时间
[[DEREF]]              never                                                            # 指定对别名的处理方式
# TLS certificates (needed for GnuTLS)
TLS_CACERT  /etc/ssl/certs/ca-certificates.crt                      # TLS连接时使用的CA证书文件的路径，必需
TLS_REQCERT allow                                                      # "demand"，表示需要验证服务器的证书
```
## 6. 其他模块
### 6.1 日志模块
```
/etc/ldap/loglevel.ldif
	dn: cn=config
	changetype: modify
	replace: olcLogLevel
	olcLogLevel: stats

ldapmodify  -Y  EXTERNAL  -H  ldapi:///  -f  loglevel.ldif               # 日志在/var/log/syslog | grep slapd , 比默认的级别详细
```
### 6.2 memberOf 开启
```
/etc/ldap/refint.ldif
	# enable_refint.ldif
	dn: cn=module{0},cn=config
	changetype: modify
	add: olcModuleLoad
	olcModuleLoad: refint.la
	-
	dn: olcOverlay=refint,olcDatabase={1}mdb,cn=config
	changetype: add
	objectClass: olcOverlayConfig
	objectClass: olcRefintConfig
	olcOverlay: refint

ldapadd -Q -Y EXTERNAL -H ldapi:// -f refint.ldif
```

```
/etc/ldap/memberof.ldif
	dn: cn=module,cn=config
	changetype: add
	cn: module
	objectClass: olcModuleList
	olcModulePath: /usr/lib/ldap
	
	dn: cn=module{0},cn=config
	changetype: modify
	add: olcModuleLoad
	olcModuleLoad: memberof.la
	
	dn: olcOverlay=memberof,olcDatabase={1}mdb,cn=config
	changetype: add
	objectClass: olcConfig
	objectClass: olcMemberOf
	objectClass: olcOverlayConfig
	objectClass: top
	olcOverlay: memberof
	olcMemberOfDangling: ignore
	olcMemberOfRefInt: TRUE
	olcMemberOfGroupOC: groupOfNames
	olcMemberOfMemberAD: member
	olcMemberOfMemberOfAD: memberOf

ldapmodify -Y EXTERNAL -H ldapi:/// -f memberof.ldif
```

- 为条目添加此属性：LDIF文件中先创建用户的dn，然后创建目标组的dn，在创建组的时候将关联的用户写在member属性中，eg：
```
dn: cn=inboc-bod-admin,ou=inboc-bod,ou=inboc,dc=inboc,dc=net
cn: inboc-bod-admin
member: cn=yu.zheng,ou=inboc-bod,ou=inboc,dc=inboc,dc=net
objectclass: groupOfNames
```
### 6.3 Self Service Password 自助密码管理
- 容器部署，解决 php 依赖准备繁琐
- 镜像 ltbproject/self-service-password:1.5.3
- 为 admin 用户设置修改密码的权限
```
下列权限可以使得 "admin,inboc,net" 对这个域 "dc=inboc,dc=tech" 做用户添加、属性修改
olcAccess: {0}to attrs=userPassword,shadowLastChange by dn="cn=admin,dc=inboc,dc=net" write by anonymous auth by self write by * none
olcAccess: {1}to dn.subtree="dc=inboc,dc=tech" by dn.base="cn=admin,dc=inboc,dc=net" write
```
- 需要对企业邮箱帐号开启设置-帐号与安全-客户端设置-客户端授权密码
- ssp.conf.php 成功配置版本，并映射到容器： /home/inboc/sspasswd/conf.php:/var/www/conf/config.inc.local.php
```php
<?php
$debug = false;
$keyphrase = "inboc";
$use_sms = false;
$use_questions = false;
$lang = "cn,zh-CN";
$use_change = true;
#$reset_url = $_SERVER['HTTP_X_FORWARDED_PROTO'] . "://" . $_SERVER['HTTP_X_FORWARDED_HOST'] . $_SERVER['SCRIPT_NAME'];
$reset_url = "https://ssp.inboc.net" . $_SERVER['HTTP_X_FORWARDED_HOST'] . $_SERVER['SCRIPT_NAME'];
$show_menu = false;
$logo = "images/logo.png";                # 这两项在配置前，需要确保图片映射路径在容器内部的 /var/www/html/images 下
$background_image = "images/back.png";
$default_action = "sendtoken";        # 默认展示在首页的修改密码的方式
$show_menu = false;              # 关闭顶部的修改方式选择菜单

# LDAP

$ldap_url = "ldap://10.13.3.107/";
$ldap_starttls = false;
$ldap_binddn = "cn=admin,dc=inboc,dc=net";
$ldap_bindpw = 'Inboc@2020';
#$ldap_bindpw = "{SSHA}UiIUaWLBYOo+2O88GNxFAdzp5M9cmlWi";
$ldap_base = "dc=inboc,dc=net";
#$ldap_base = "dc=inboc,dc=tech";    # 在这里同时书写两个，只会生效后一个域, 使用两个实例连接 ldap 服务
$ldap_fullname_attribute = "cn";
$ldap_filter = "(&(objectClass=inetOrgPerson)($ldap_fullname_attribute={login}))";
$ldap_use_exop_passwd = false;
$ldap_use_ppolicy_control = false;
$TLS_REQCERT = "allow";

# email
$mail_attributes = array("mail", "gosaMailAlternateAddress", "proxyAddresses");
$mail_address_use_ldap = true;
$mail_from = "chao.long@inboc.net";
$mail_from_name = "密码自主修改服务";
$mail_signature = "如有疑问,请联系运维同事,英博智云.";
$notify_on_change = false;
$mail_protocol = 'smtp';
$mail_smtp_host = 'smtphz.qiye.163.com';
$mail_smtp_auth = true;
$mail_smtp_user = "chao.long@inboc.net";
$mail_smtp_pass = 'TdhYDdgvN7Hpky5a';
$mail_smtp_port = 465;
$mail_smtp_timeout = 30;
$mail_smtp_keepalive = false;
$mail_smtp_secure = 'ssl';
$mail_smtp_autotls = false;
$mail_smtp_options = array();
$mail_contenttype = 'text/plain';
$mail_wordwrap = 0;
$mail_charset = 'utf-8';
$mail_priority = 3;

# password policy
$hash = "SSHA"; # 修改的用户密码传递过程中会采取这里指定的加密
$pwd_min_length = 8;
$pwd_max_length = 20;
$pwd_min_lower = 1;
$pwd_min_upper = 1;
$pwd_min_digit = 1;
$pwd_min_special = 1;
$pwd_special_chars = "^a-zA-Z0-9";
$pwd_complexity = 4;
$pwd_no_reuse = true;
$pwd_forbidden_words = array("Inboc", "inboc", "INBOC", "password");
$pwd_show_policy_pos = "above";
$pwd_show_policy = "onerror";
?>
```

```
docker run -p 8000:80 \
> --restart=always \
> --name sspass \
> -v /home/inboc/sspasswd/conf.php:/var/www/conf/config.inc.local.php \
> -itd docker.io/ltbproject/self-service-password
```
#### 6.3.1 不能进入修改链接 Token is not valid
```
注释了这两项
#$use_tokens = true;
#$crypt_tokens = true;
```
#### 6.3.2 反向代理 Self Service Password
```
upstream ssp {
  server 10.13.3.108:8000;
}

server {
    listen 80;
    server_name ssp.inboc.net;
    return 301 https://$server_name$request_uri;
}
server {
    listen 443 ssl ;
    server_name ssp.inboc.net;
    ssl_certificate webmin/tls_ca.pem;
    ssl_certificate_key webmin/tls_key.pem;

    location / {
      proxy_pass http://ssp;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto "https";
      proxy_read_timeout 1800s;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
}
```
### 6.4 LDAP 的数据做备份还原和迁移
#### 6.4.1 备份
```
sudo slapcat -n 3 -l ./back3.ldif           # -n 指定数据库编号，数字对应各个dit的数据库编号( 配置数据库----olcDatabase={0}config.ldif; 目录信息数据库----olcDatabase={1}mdb.ldif )
```
#### 6.4.2 恢复
原服务器上恢复，服务需要暂停
```
sudo systemctl stop slapd
```
配置目录一般位于 `/etc/openldap/slapd.d`，将原有配置删除，然后使用 `slapadd` 导入新的配置
```
$ rm -rf /etc/ldap/slapd.d/*
$ slapadd  -n  0  -F  /etc/ldap/slapd.d  -l  ./config.2021-09-18.ldif
$ chown -R openldap:openldap /etc/ldap/slapd.d
```
数据目录一般位于 `/var/lib/ldap-*`，模拟时，将原有数据删除，然后使用 `slapadd` 导入新的数据：
```
$ rm  -rf  /var/lib/ldap-inboc/*         # 定制了不同的$default_action = "sendtoken";
$show_menu = false;dit有不同的目录分别存储不同domain的内容，注意，导入前目录必需首先存在，且权属 openldap:openldap。
$ slapadd -n 1 -F /etc/openldap/slapd.d -l ./data.2021-09-18.ldif
$ chown -R openldap:openldap  /var/lib/ldap-inboc
$ systemctl start slapd
```
#### 6.4.3 openldap的迁移
通过 playbook 新建的服务器，执行恢复
```
slapadd -n 1 -F /etc/openldap/slapd.d -l ./data.2021-09-18.ldif
[[如果导入失败，或者数据已存在，删除rm]] -rf /var/lib/ldap/*  这是创建时规划的存储路径, 然后重新导入
```
## 7. 集成 Ubuntu SSSD
集成 sssd 之前需要在 openldap 中，创建 linux 系统所需要的 posix group ，同时每个用户的属性需要增加 gid、并且在这个过程中配置 posix account 的属性
### 7.1 Config
- create configuration file `/etc/sssd/sssd.conf`， setting with permissions 0600 and ownership root:root
```
sudo vim /etc/sssd/sssd.conf
chmod 0600 /etc/sssd/sssd.conf
```

```ini TI:"/etc/sssd/sssd.conf"
[sssd]
services = nss, pam
config_file_version = 2
domains = inboc.net

[nss]
filter_users=root,ldap
reconnection_retries = 3
entry_cache_timeout = 300
entry_cache_nowait_percentage = 75

[pam]
reconnection_retries = 3
offline_credentials_expiration = 2
offline_failed_login_attempts = 3
offline_failed_login_delay = 5

[domain/inboc.net]
use_fully_qualified_names = False
cache_credentials = True
id_provider = ldap
auth_provider = ldap
chpass_provider = ldap
access_provider = simple
ldap_search_base = dc=inboc,dc=net
ldap_id_use_start_tls = False
ldap_uri = ldaps://10.13.3.107
ldap_default_bind_dn = cn=inbocread,dc=inboc,dc=net
ldap_default_authtok_type = obfuscated_password
ldap_default_authtok = AAAQAJJXrwtdoId7obUE+1mn+vIgT1eGMDbn9AZBuMcCXa+9Y3mglrmK3i08bU20A/AMhTFAtMhbvOMP8gwwB9nWWrQAAQID
ldap_access_order = filter
# ldaps连接的时候配置此项, 由于证书是否合法会导致需求方式不一致
ldap_tls_reqcert = allow         
# filtering rules for multiple users
ldap_user_search_filter = (|(cn=chao.long)(cn=jian.xie)) 
# filtering rules for groups
ldap_user_search_filter = (memberOf=cn=inboc-sys-junior,ou=inboc-sys,ou=inboc,dc=inboc,dc=net)
# filtering rules for groups & users
ldap_user_search_filter = (|(cn=jian.xie)(memberOf=cn=inboc-sys-junior,ou=inboc-sys,ou=inboc,dc=inboc,dc=net)) 

[domain/ibswufe.com]
use_fully_qualified_names = False
cache_credentials = True
id_provider = ldap
auth_provider = ldap
chpass_provider = ldap
access_provider = simple
ldap_search_base = dc=ibswufe,dc=com
ldap_id_use_start_tls = False
ldap_uri = ldaps://10.13.3.107
ldap_default_bind_dn = cn=inbocread,dc=inboc,dc=net
ldap_default_authtok_type = obfuscated_password
ldap_default_authtok = AAAQAJJXrwtdoId7obUE+1mn+vIgT1eGMDbn9AZBuMcCXa+9Y3mglrmK3i08bU20A/AMhTFAtMhbvOMP8gwwB9nWWrQAAQID
ldap_tls_reqcert = allow
ldap_access_order = filter
ldap_user_search_filter = (cn=si.li)
```
### 7.2 密码加密
```
sss_obfuscate --domain=inboc.net   # 默认会将这个命令生成的加密密钥放置在/etc/sssd/sssd.conf
enterpasswd
reenter
```
### 7.3 restart service
```
systemctl restart sssd.service
# 本服务的数据库在本地存储为此路径 /var/lib/sss/db
```
- if using a custom CA, an easy way to have a host trust it is to place it in `/usr/local/share/ca-certificates/` with a `.crt` extension; then run `sudo update-ca-certificates`
- Alternatively, you can edit `/etc/ldap/ldap.conf` and point `TLS_CACERT` to the CA public key file.
- we are using a authoritative certificate , so , there is no need to update ca certificates on this server.
- remember `restart sssd`
- check
```
ldapwhoami -x -ZZ -H ldap://ldap01.example.com

ldapwhoami -x -H ldaps://ldap01.example.com
```
- logs on LDAP server. supposed to see `STARTTLS` `oid` here.
```
========================
Dec  6 12:09:51 inboc-sys-test-07 slapd[141155]: conn=1054 fd=23 ACCEPT from IP=10.13.3.106:58184 (IP=0.0.0.0:636)
Dec  6 12:09:51 inboc-sys-test-07 slapd[141155]: conn=1054 fd=23 TLS established tls_ssf=256 ssf=256
Dec  6 12:09:51 inboc-sys-test-07 slapd[141155]: conn=1054 fd=23 closed (connection lost)
===========================
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 fd=23 ACCEPT from IP=10.13.3.106:50606 (IP=0.0.0.0:389)
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 op=0 EXT oid=1.3.6.1.4.1.1466.20037
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 op=0 STARTTLS
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 op=0 RESULT oid= err=0 text=
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 fd=23 TLS established tls_ssf=256 ssf=256
Dec  6 12:10:07 inboc-sys-test-07 slapd[141155]: conn=1055 fd=23 closed (connection lost)
```
### 7.4 Verification
```
id john.smith
	uid=100010(john.smith)  gid=100010  groups=100010

sudo login
ldap-client login: john
Password:
	Welcome to Ubuntu Focal Fossa (development branch) (GNU/Linux 5.4.0-24-generic x86_64)
	(...)
	Creating directory '/home/john'.
```
### 7.5 不能正常登录，permission denied
- describe
```Shell
tail -f /var/log/auth.log

pam_unix(login:auth): authentication failure; logname=root uid=0 euid=0 tty=/dev/pts/0 ruser= rhost=  user=si.li
Dec  7 19:24:09 inboc-sys-test-06 login[99457]: pam_sss(login:auth): authentication success; logname=root uid=0 euid=0 tty=/dev/pts/0 ruser= rhost= user=si.li
Dec  7 19:24:09 inboc-sys-test-06 login[99457]: pam_sss(login:account): Access denied for user si.li: 6 (Permission denied)
Dec  7 19:24:09 inboc-sys-test-06 login[99457]: Permission denied
```

```Shell
tail -f /var/log/syslog | grep slapd
slapd[35647]: conn=1521 op=12 SRCH base="dc=inboc,dc=net" scope=2 deref=0 filter="(&(&(uid=si.li)(objectClass=posixAccount)(&(uidNumber=*)(!(uidNumber=0))))(|(cn=chao.long)(cn=si.li)))"
slapd[35647]: conn=1521 op=12 SRCH attr=objectClass uid userPassword uidNumber gidNumber gecos homeDirectory loginShell krbPrincipalName cn modifyTimestamp modifyTimestamp shadowLastChange shadowMin shadowMax shadowWarning shadowInactive shadowExpire shadowFlag krbLastPwdChange krbPasswordExpiration pwdAttribute authorizedService accountExpires userAccountControl nsAccountLock host rhost loginDisabled loginExpirationTime loginAllowedTimeMap sshPublicKey userCertificate;binary mail
slapd[35647]: conn=1521 op=12 SEARCH RESULT tag=101 err=0 nentries=1 text=
slapd[35647]: conn=1521 op=13 SRCH base="dc=inboc,dc=net" scope=2 deref=0 filter="(&(memberUid=si.li)(objectClass=posixGroup)(cn=*)(&(gidNumber=*)(!(gidNumber=0))))"
slapd[35647]: conn=1521 op=13 SRCH attr=objectClass cn userPassword gidNumber modifyTimestamp modifyTimestamp
slapd[35647]: conn=1521 op=13 SEARCH RESULT tag=101 err=0 nentries=0 text=
slapd[35647]: conn=1523 fd=23 ACCEPT from IP=10.13.3.106:40996 (IP=0.0.0.0:636)
slapd[35647]: conn=1523 fd=23 TLS established tls_ssf=256 ssf=256
slapd[35647]: conn=1523 op=0 SRCH base="" scope=0 deref=0 filter="(objectClass=*)"
slapd[35647]: conn=1523 op=0 SRCH attr=* altServer namingContexts supportedControl supportedExtension supportedFeatures supportedLDAPVersion supportedSASLMechanisms domainControllerFunctionality defaultNamingContext lastUSN highestCommittedUSN
slapd[35647]: conn=1523 op=0 SEARCH RESULT tag=101 err=0 nentries=1 text=
slapd[35647]: conn=1523 op=1 BIND dn="cn=si.li,ou=inboc-sys,ou=inboc,dc=inboc,dc=net" method=128
slapd[35647]: slap_global_control: unrecognized control: 1.3.6.1.4.1.42.2.27.8.5.1
slapd[35647]: conn=1523 op=1 BIND dn="cn=si.li,ou=inboc-sys,ou=inboc,dc=inboc,dc=net" mech=SIMPLE ssf=0
slapd[35647]: conn=1523 op=1 RESULT tag=97 err=0 text=
slapd[35647]: conn=1523 op=2 UNBIND
slapd[35647]: conn=1523 fd=23 closed
```
- solution
```
access_provider = ldap  # 将此项注释或者配置为 simple
- 当设置为 "ldap" 时，sssd 使用 LDAP 作为访问提供程序。服务器应需要特别配置才可。
- 当设置为 "simple" 时，sssd 使用简单的访问提供程序来控制用户访问权限。此时应该是来源于 linux 系统的权限控制。
```

ldap修改密码后，用户登录系统的密码改变。
## 8. LDAP 多域下的引用，即用户映射(配置)
### 8.1 创建
```ldif TI:"referral.ldif"
# 失败，不能在旧条目共存
dn: ou=inboc-bod,ou=inboc,dc=inboc,dc=net
changetype: modify
add: objectClass
objectClass: extensibleObject
objectClass: referral
ref: ldap://10.8.0.88:389/ou=swufe-bod,ou=swufe,dc=ibswufe,dc=com

# 成功 
dn: ou=inboc-ref,ou=inboc,dc=inboc,dc=net # 此处在哪一个层级不重要
objectClass: extensibleObject
objectClass: referral
ref: ldap://10.1.0.1:389/ou=ibswufe-user-rob,ou=ibswufe-user,ou=ibswufe,dc=ibswufe,dc=com # 此处写到用户和组的上层为佳，精确、安全
```

```bash TI:"在 LDAP 创建 ref"
ldapmodify -D 'cn=inbocadmin,dc=inboc,dc=net' -w Inboc@2020 -H ldapi:/// -f t.ldif
```

>[!必要条件]
>被引用的域，需要给予过滤的目标 entry 读权限  
参考 Bastillion、Rancher 使用

### 8.2 查找
```bash
ldapsearch -x -C  -D 'cn=inbocadmin,dc=inboc,dc=net' -w Inboc@2020 -b 'dc=inboc,dc=net' '(cn=swufe-yu.zheng)'
ldapsearch -x -C  -D 'cn=inbocadmin,dc=inboc,dc=net' -w Inboc@2020 -b 'dc=inboc,dc=net' '(memberOf=cn=swufe-bod-admin,ou=swufe-bod,ou=swufe,dc=ibswufe,dc=com)'

# 结果, 在桌面客户端 phpldapadmin 可以看到这个记录
# search reference
ref: ldap://10.8.0.88:389/ou=swufe-bod,ou=swufe,dc=ibswufe,dc=com??sub

# swufe-yu.zheng, swufe-bod, swufe, ibswufe.com
dn: cn=swufe-yu.zheng,ou=swufe-bod,ou=swufe,dc=ibswufe,dc=com
departmentNumber: 1
displayName: Zheng Yu
mail: yu.zheng@inboc.net
objectClass: inetOrgPerson
sn: Zheng
title: President
uid: 10000
cn: swufe-yu.zheng
```
### 8.4 删除 referral
```
dn: ou=inboc-ref,ou=inboc,dc=inboc,dc=net
changetype: delete
```

`ldapmodify -D 'cn=inbocadmin,dc=inboc,dc=net' -w Inboc@2020 -H ldapi:/// -f t.ldif -M`
## 9. 设置 Proxy
不能有效隔离权限，连接 proxy 服务器后会完全读取所有 dn ，未使用。
![proxy](01_LDAP%20ON%20Ubuntu-v1.md#5.%20Proxy)