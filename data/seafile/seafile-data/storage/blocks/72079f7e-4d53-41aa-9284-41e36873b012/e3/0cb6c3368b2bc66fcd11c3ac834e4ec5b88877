### 1 . 替换 label 标签，增强自定义表示
```
sum by (server)  (label_replace(rate(minio_s3_traffic_received_bytes{job="inboc-sys-minio-cluster",server=~'.*'}[$__rate_interval]), "server", "$1", "server", "inboc-sys-(.*).inboc.net:9000"))
```
### 2 .  Global variables
在 Prom 查询框中, 输入变量并查询，可以看到变量值，通过 dashboard 展示设置做的自行计算\
[$__dashboard](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__dashboard)  \
[$__from and $__to](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__from-and-__to)  \
 [$__interval](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__interval)\
 [$__interval_ms](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__interval_ms)\
[ $__name](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__name)\
[ $__org](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__org)\
[$__user](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__user)\
[ $__range](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__range)\
[$__rate_interval](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__rate_interval)\
[$__rate_interval_ms](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__rate_interval_ms)

### 3 . 值处理
#### 3.1 展示为需求格式，但是值没有变化
Value  mappings --> 选择 Regex 条件：(.*):\d+    ----   \$1  -->  可以得到10.1.11.51:9100 转换为 10.1.11.51
#### 3.2 值处理为需求格式，可以通过data transform join 查询出的表
`label_replace(((1 - sum(increase(node_cpu_seconds_total{mode="idle",instance=~"10.1.1.55:9100|10.1.1.54:9100|10.1.1.56:9100"}[5m])) by (instance) / sum(increase(node_cpu_seconds_total{instance=~"10.1.1.55:9100|10.1.1.54:9100|10.1.1.56:9100"}[5m])) by (instance) ) * 100),'instance','$1','instance','(.*):.+')`

### 4. grafana表格单位的进制和区分
| 单位 | 解释 |
| :--: | :--: |
| bytes(SI) | 二进制单位<br>1 byte (B) = 8 bits (b)<br>1 kibibyte (KiB) = 1024 bytes (B) |
| bytes(IEC) | 十进制单位<br>1 byte (B) = 8 bits (b)<br>kilobyte (kB) = 1000 bytes (B) |
|  |  |
|  |  |
|  |  |

### 5.  nginx-vts --监控下的网络通信状态（from poe）
| status | `describe` |
| :--: | :--: |
| bypass<br>（绕过） | `当缓存系统不使用缓存，并直接访问原始数据源时，称为绕过状态。这可能是由于缓存被禁用、缓存未命中或缓存策略指示绕过缓存。` |
| expired<br>（过期） | `缓存中存储的数据已经超过了其预设的有效期限。当客户端请求过期的数据时，缓存系统通常会将其标记为过期状态，并尝试从原始数据源获取新的数据。` |
| hit<br>（命中） | `当缓存系统接收到一个请求，并且所请求的数据在缓存中可用时，称为命中状态。在这种情况下，缓存系统可以直接从缓存中返回数据，而无需访问原始数据源。` |
| miss<br>（未命中） | `当缓存系统接收到一个请求，但请求的数据在缓存中不可用时，称为未命中状态。在这种情况下，缓存系统需要从原始数据源获取数据，并将其存储在缓存中，以供将来的请求使用。` |
| Revalidated<br>（重新验证） | `在某些情况下，缓存系统可能会在数据过期后尝试重新验证其有效性，而不是立即从原始数据源获取新数据。这样可以减少对原始数据源的访问次数。如果数据仍然有效，缓存系统将使用它，并将其标记为重新验证状态。` |
| Scarce<br>（稀缺） | `当缓存系统的资源（例如内存或磁盘空间）不足时，称为稀缺状态。在这种情况下，缓存系统可能无法存储新的数据，或者可能需要淘汰一些现有的数据来腾出空间。` |
| Stale<br>（陈旧） | `当缓存中的数据在有效期内但已经过时时，称为陈旧状态。在这种情况下，缓存系统可能仍然返回陈旧的数据，但会在返回之前标记它们为陈旧状态，并尝试在后台更新数据。` |
| Updating<br>（更新） | `当缓存系统正在尝试更新陈旧的数据时，称为更新中状态。在这种状态下，缓存系统可能会向原始数据源发出请求，并在接收到新数据后更新缓存中的数据。` |
## 6. Nodata or another value
`(count(nginx_vts_server_requests_total{code=~'1xx',host=~'$host'} != 0) by (code)) or vector(0)`
## 7. 占位