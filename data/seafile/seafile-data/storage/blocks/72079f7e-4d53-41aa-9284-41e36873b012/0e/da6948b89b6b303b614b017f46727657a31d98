## Nginx虚拟主机流量状态模块

## 目录

*   [16、指令](#16%E3%80%81%E6%8C%87%E4%BB%A4)
    *   [vhost\_traffic\_status](#vhost_traffic_status)
    *   [vhost\_traffic\_status\_zone](#vhost_traffic_status_zone)
    *   [vhost\_traffic\_status\_dump](#vhost_traffic_status_dump)
    *   [vhost\_traffic\_status\_display](#vhost_traffic_status_display)
    *   [vhost\_traffic\_status\_display\_format](#vhost_traffic_status_display_format)
    *   [vhost\_traffic\_status\_display\_jsonp](#vhost_traffic_status_display_jsonp)
    *   [vhost\_traffic\_status\_display\_sum\_key](#vhost_traffic_status_display_sum_key)
    *   [vhost\_traffic\_status\_filter](#vhost_traffic_status_filter)
    *   [vhost\_traffic\_status\_filter\_by\_host](#vhost_traffic_status_filter_by_host)
    *   [vhost\_traffic\_status\_filter\_by\_set\_key](#vhost_traffic_status_filter_by_set_key)
    *   [vhost\_traffic\_status\_filter\_check\_duplicate](#vhost_traffic_status_filter_check_duplicate)
    *   [vhost\_traffic\_status\_filter\_max\_node](#vhost_traffic_status_filter_max_node)
    *   [vhost\_traffic\_status\_limit](#vhost_traffic_status_limit)
    *   [vhost\_traffic\_status\_limit\_traffic](#vhost_traffic_status_limit_traffic)
    *   [vhost\_traffic\_status\_limit\_traffic\_by\_set\_key](#vhost_traffic_status_limit_traffic_by_set_key)
    *   [vhost\_traffic\_status\_limit\_check\_duplicate](#vhost_traffic_status_limit_check_duplicate)
    *   [vhost\_traffic\_status\_set\_by\_filter](#vhost_traffic_status_set_by_filter)
    *   [vhost\_traffic\_status\_average\_method](#vhost_traffic_status_average_method)
    *   [vhost\_traffic\_status\_histogram\_buckets](#vhost_traffic_status_histogram_buckets)
    *   [vhost\_traffic\_status\_bypass\_limit](#vhost_traffic_status_bypass_limit)
    *   [vhost\_traffic\_status\_bypass\_stats](#vhost_traffic_status_bypass_stats)
*   [17、另请参阅](#17%E3%80%81%E5%8F%A6%E8%AF%B7%E5%8F%82%E9%98%85)
*   [18、待办事项](#18%E3%80%81%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9)
*   [19、捐赠](#19%E3%80%81%E6%8D%90%E8%B5%A0)
*   [20、作者](#20%E3%80%81%E4%BD%9C%E8%80%85)

### 16、指令

![draw_io_vts_diagram](assets/1710165941-9283ca1d177355c57d6971c6828c13ad.png)

#### vhost\_traffic\_status

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status** <on\|off> |
| **默认值** | off |
| **语境** | http, server, location |

`说明：` 启用或禁用模块工作。如果设置`vhost_traffic_status_zone`指令，则会自动启用。

#### vhost\_traffic\_status\_zone

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_zone** \[shared:_name:size_\] |
| **默认值** | shared:vhost\_traffic\_status:1m |
| **语境** | http |

`说明：` 为共享内存区域设置参数，该区域将保存各种键的状态。缓存在所有工作进程之间共享。  
在大多数情况下，nginx-[module](https://so.csdn.net/so/search?q=module&spm=1001.2101.3001.7020)\-vts使用的共享内存大小不会增加太多。  
当使用`vhost_traffic_status_filter_by_set_key`指令时，共享内存的大小会增加很多，但是如果过滤器的键是固定的（_例如，国家代码的总数约为240_），则不会持续增加。

如果使用`vhost_traffic_status_filter_by_set_key`指令，请按如下方式设置：

*   默认设置为32M共享内存大小。(`vhost_traffic_status_zone shared:vhost_traffic_status:32m`)
*   如果出现(_`"ngx_slab_alloc() failed: no memory in vhost_traffic_status_zone"`_)的异常日志，则增加到大于（usedSize\*2）

#### vhost\_traffic\_status\_dump

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_dump** _path_ \[_period_\] |
| **默认值** | \-  |
| **语境** | http |

`说明：` 启用统计数据存储和还原。  
_path_ 是存储统计数据的位置。(例如 `/var/log/nginx/vts.db`)  
_period_ 是一个备份周期。(默认: 60s)  
如果nginx被（`SIGKILL`）信号退出，则不管备份周期如何，它都会立即备份。

#### vhost\_traffic\_status\_display

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_display** |
| **默认值** | \-  |
| **语境** | http, server, location |

`说明：` 启用或禁用显示处理程序模块。

#### vhost\_traffic\_status\_display\_format

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_display\_format** <json\|html\|jsonp\|prometheus> |
| **默认值** | json |
| **语境** | http, server, location |

`说明：` 设置显示处理模块输出的格式。  
如果设置`json`，则将用JSON文档响应。  
如果设置了`html`，则将以内置的HTML格式的实时仪表板进行响应。  
如果设置`jsonp`，则将使用JSONP回调函数（默认值：_ngx\_http\_vhost\_traffic\_status\_JSONP\_callback_）响应。  
如果设置`prometheus`，则将用一个[prometheus](https://prometheus.io/) 文档来响应。

#### vhost\_traffic\_status\_display\_jsonp

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_display\_jsonp** _callback_ |
| **默认值** | ngx\_http\_vhost\_traffic\_status\_jsonp\_callback |
| **语境** | http, server, location |

`说明：` 设置JSONP的回调名称。

#### vhost\_traffic\_status\_display\_sum\_key

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_display\_sum\_key** _name_ |
| **默认值** | \*  |
| **语境** | http, server, location |

`说明：` 在serverZones字段的JSON中设置sum键对应的字符串。默认的sum键字符串是“\*”。

#### vhost\_traffic\_status\_filter

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_filter** <on\|off> |
| **默认值** | on  |
| **语境** | http, server, location |

`说明：` 启用或禁用筛选器功能。

#### vhost\_traffic\_status\_filter\_by\_host

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_filter\_by\_host** <on\|off> |
| **默认值** | off |
| **语境** | http, server, location |

`说明：` 启用或禁用keys by Host header 字段。  
如果设置`on`同时nginx的server\_name指令设置多个或以星号开头的通配符名称，例如“_.example.org”，同时请求server使用主机名，如(a|b|c).example.org或_.example.org，则json格式的 serverZones将按如下方式打印：

```Nginx
server {
  server_name *.example.org;
  vhost_traffic_status_filter_by_host on;

  ...

}
```

```Json
  ...
  "serverZones": {
      "a.example.org": {
      ...
      },
      "b.example.org": {
      ...
      },
      "c.example.org": {
      ...
      }
      ...
   },
   ...
```

It provides the same function that set `vhost_traffic_status_filter_by_set_key $host`.  
它与设置`vhost_traffic_status_filter_by_set_key $host`提供了相同的函数。

#### vhost\_traffic\_status\_filter\_by\_set\_key

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_filter\_by\_set\_key** _key_ \[_name_\] |
| **默认值** | \-  |
| **语境** | http, server, location |

`说明：` 启用由用户定义的键。  
_key_ 是用于计算流量的键字符串。  
_name_ 是用于计算流量的分组字符串。  
_key_和_name_ 可以包含变量，如 h o s t ， host， host，server\_name。  
指定第二个参数_name_时对应的分组信息在`filterZones`中体现。  
如果没有指定第二个参数_name_，则key的组属于`serverZones`。  
geoip模块示例如下：

```Nginx
server {
  server_name example.org;
  vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name;

  ...

}
```

```Json
  ...
  "serverZones": {
  ...
  },
  "filterZones": {
      "country::example.org": {
          "KR": {
              "requestCounter":...,
              "inBytes":...,
              "outBytes":...,
              "responses":{
                  "1xx":...,
                  "2xx":...,
                  "3xx":...,
                  "4xx":...,
                  "5xx":...,
                  "miss":...,
                  "bypass":...,
                  "expired":...,
                  "stale":...,
                  "updating":...,
                  "revalidated":...,
                  "hit":...,
                  "scarce":...
              },
              "requestMsecCounter":...,
              "requestMsec":...,
              "requestMsecs":{
                  "times":[...],
                  "msecs":[...]
              },
          },
          "US": {
          ...
          },
          ...
      },
      ...
  },
  ...
```

#### vhost\_traffic\_status\_filter\_check\_duplicate

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_filter\_check\_duplicate** <on\|off> |
| **默认值** | on  |
| **语境** | http, server, location |

`说明：` 启用或禁用`vhost_traffic_status_filter_by_set_key`的重复数据删除。  
如果启用此选项，则在每个指令（http、server、location）中只处理一个重复值（`key` + `name`）。

#### vhost\_traffic\_status\_filter\_max\_node

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_filter\_max\_node** _number_ \[_string_ …\] |
| **默认值** | 0   |
| **语境** | http |

`说明：` 基于指定的_number_和_string_参数启用筛选器大小限制。  
如果超过制定的_number_，则通过[LRU](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) 算法删除现有节点。  
_number_参数是将限制的节点的大小。默认值`0`不限制过滤器。  
一个节点是JSON文档中`filterZones`中的一个对象。  
_string_参数匹配在`vhost_traffic_status_filter_by_set_key`指令中设置的组字符串对应的值。  
即使只有第一部分匹配，匹配也是成功的，就像正则表达式`/^string.*/`。  
默认情况下，如果不设置_string_参数，则它将应用于所有的筛选器。

例如：

`$ vi nginx.conf`

```Nginx
http {

    geoip_country /usr/share/GeoIP/GeoIP.dat;

    vhost_traffic_status_zone;

    # The all filters are limited to a total of 16 nodes.
    # vhost_traffic_status_filter_max_node 16

    # The `/^uris.*/` and `/^client::ports.*/` group string patterns are limited to a total of 64 nodes.
    vhost_traffic_status_filter_max_node 16 uris client::ports

    ...

    server {

        server_name example.org;

        ...

        vhost_traffic_status_filter_by_set_key $uri uris::$server_name;
        vhost_traffic_status_filter_by_set_key $remote_port client::ports::$server_name;
        vhost_traffic_status_filter_by_set_key $geoip_country_code country::$server_name;

    }
}
```

`$ for i in {0..1000}; do curl -H 'Host: example.org' -i "http://localhost:80/test$i"; done`

![screenshot-vts-filter-max-node](assets/1710165941-9408be0e2dd8f991673d817cbab01979.png)

在上面的例子中，`/^uris.*/`和`/^client::ports.*/`分组字符串被限制为总共16个节点。其他过滤器，如`country::.*`不受限制。

#### vhost\_traffic\_status\_limit

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_limit** <on\|off> |
| **默认值** | on  |
| **语境** | http, server, location |

`说明：` 启用或禁用限制功能。

#### vhost\_traffic\_status\_limit\_traffic

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_limit\_traffic** _member_:_size_ \[_code_\] |
| **默认值** | \-  |
| **语境** | http, server, location |

`说明：` 为指定_member_启用流量限制。  
参数_member_是限制流量的统计粒度字符串。  
参数_size_是限制流量的大小字符串，单位（k/m/g）。  
参数_code_是请求被拒绝时候的响应代码。(默认响应码:503）

可用的\*`member`\*字符串如下

*   **request**
    *   从客户端接收的请求总数。
*   **in**
    *   从客户端接收的总字节数。
*   **out**
    *   发送到客户端的总字节数。
*   **1xx**
    *   状态代码为1xx的响应数。
*   **2xx**
    *   状态代码为2xx的响应数。
*   **3xx**
    *   状态代码为3xx的响应数。
*   **4xx**
    *   状态代码为4xx的响应数。
*   **5xx**
    *   状态代码为5xx的响应数。
*   **cache\_miss**
    *   缓存未命中数。
*   **cache\_bypass**
    *   缓存旁路数。
*   **cache\_expired**
    *   缓存已过期数。
*   **cache\_stale**
    *   缓存失效的数量。
*   **cache\_updating**
    *   缓存更新的次数。
*   **cache\_revalidated**
    *   重新验证的缓存数。
*   **cache\_hit**
    *   缓存命中数
*   **cache\_scarce**
    *   未达缓存要求的请求的数量。

#### vhost\_traffic\_status\_limit\_traffic\_by\_set\_key

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_limit\_traffic\_by\_set\_key** _key_ _member_:_size_ \[_code_\] |
| **默认值** | \-  |
| **语境** | http, server, location |

`说明：` 针对制定的_key_和_member_进行流量控制  
参数_key_是限制流量的key字符串  
参数_member_是限制流量的member字符串  
参数_size_是流量的限制的大小字符串，单位（k/m/g）。  
参数_code_是请求被拒绝时候的响应代码。(默认响应码:503）

_`key`_ 语法如下：

*   _`group`_@\[_`subgroup`_@\]_`name`_

可用的\*`group`\* 字符串如下：

*   **NO**
    *   server group。
*   **UA**
    *   upstream alone group。
*   **UG**
    *   The group of upstream group.(use _`subgroup`_)
*   **CC**
    *   cache group。
*   **FG**
    *   filter group。(use _`subgroup`_)

可用的\*`member`\*字符串如下：

*   **request**
    *   从客户端接收的请求总数。
*   **in**
    *   从客户端接收的总字节数。
*   **out**
    *   发送到客户端的总字节数。
*   **1xx**
    *   状态代码为1xx的响应数。
*   **2xx**
    *   状态代码为2xx的响应数。
*   **3xx**
    *   状态代码为3xx的响应数。
*   **4xx**
    *   状态代码为4xx的响应数。
*   **5xx**
    *   状态代码为5xx的响应数。
*   **cache\_miss**
    *   缓存未命中数。
*   **cache\_bypass**
    *   缓存旁路数。
*   **cache\_expired**
    *   缓存已过期数。
*   **cache\_stale**
    *   缓存失效的数量。
*   **cache\_updating**
    *   缓存更新的次数。
*   **cache\_revalidated**
    *   重新验证的缓存数。
*   **cache\_hit**
    *   缓存命中数
*   **cache\_scarce**
    *   未达缓存要求的请求的数量。

这里的_member_与`vhost_traffic_status_limit_traffic`指令下的_member_相同。

#### vhost\_traffic\_status\_limit\_check\_duplicate

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_limit\_check\_duplicate** <on\|off> |
| **默认值** | on  |
| **语境** | http, server, location |

`说明：` 启用或禁用vhost\_traffic\_status\_limit\_by\_set\_key的重复数据删除。  
如果启用此选项，则只处理每个指令（http、server、location）中的重复值（`member`或者`key` + `member`）中的一个。

#### vhost\_traffic\_status\_set\_by\_filter

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_set\_by\_filter** _$variable_ _group_/_zone_/_name_ |
| **默认值** | \-  |
| **语境** | http, server, location, if |

`说明：` 获取存储在共享内存中的指定状态值。  
它可以获取几乎所有的状态值，并将获得的值存储在第一个参数\*$variable\*中。

*   **group**
    *   server
    *   filter
    *   upstream@alone
    *   upstream@group
    *   cache
*   **zone**
    *   server
        *   _name_
    *   filter
        *   _filter\_group_@_name_
    *   upstream@group
        *   _upstream\_group_@_name_
    *   upstream@alone
        *   @_name_
    *   cache
        *   _name_
*   **name**
    *   requestCounter
        *   从客户端接收的客户端请求总数。
    *   requestMsecCounter
        *   累积的请求处理时间（毫秒）。
    *   requestMsec
        *   请求处理时间的平均值（毫秒）
    *   responseMsecCounter
        *   仅上游响应处理时间的累积数（毫秒）。
    *   responseMsec
        *   仅上游响应处理时间的平均值（毫秒）。
    *   inBytes
        *   从客户端接收的总字节数。
    *   outBytes
        *   发送到客户端的总字节数
    *   1xx, 2xx, 3xx, 4xx, 5xx
        *   状态代码为1xx、2xx、3xx、4xx和5xx的响应数。
    *   cacheMaxSize
        *   配置中指定的缓存的最大大小限制。
    *   cacheUsedSize
        *   缓存的当前大小。
    *   cacheMiss
        *   缓存未命中数。
    *   cacheBypass
        *   缓存旁路数。
    *   cacheExpired
        *   缓存过期数。
    *   cacheStale
        *   缓存失效的数量。
    *   cacheUpdating
        *   缓存更新的次数。
    *   cacheRevalidated
        *   重新验证的缓存数。
    *   cacheHit
        *   缓存命中的数量
    *   cacheScarce
        *   未达缓存要求的请求的数量。
    *   weight
        *   server的当前权重值。
    *   maxFails
        *   server的当前max\_fails设置。
    *   failTimeout
        *   server的当前fail\_timeout设置。
    *   backup
        *   server的当前备份设置(0或1)
    *   down
        *   server的当前下线设置(0或1)

`注意：`_name_区分大小写。所有返回值都采用整数类型。

例如：

*   serverZones中的请求计数器设置
    *   **vhost\_traffic\_status\_set\_by\_filter** `$requestCounter` `server/example.org/requestCounter`
*   filterZones中的请求计数器设置
    *   **vhost\_traffic\_status\_set\_by\_filter** `$requestCounter` `filter/country::example.org@KR/requestCounter`
*   upstreamZones中的请求计数器设置
    *   **vhost\_traffic\_status\_set\_by\_filter** `$requestCounter` `upstream@group/backend@10.10.10.11:80/requestCounter`
*   upstreamZones::nogroups中的请求计数器设置
    *   **vhost\_traffic\_status\_set\_by\_filter** `$requestCounter` `upstream@alone/10.10.10.11:80/requestCounter`
*   cacheZones中的命中率计数器设置
*   **vhost\_traffic\_status\_set\_by\_filter** `$cacheHit` `cache/my_cache_name/cacheHit`

#### vhost\_traffic\_status\_average\_method

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_average\_method** <AMM或WMA> \[_period_\] |
| **默认值** | AMM 60s |
| **语境** | http, server, location |

`说明：` 设置计算响应处理时间平均值的公式和方法。  
The _period_ is an effective time of the values used for the average calculation.(Default: 60s)  
参数_period_用来平均值的有效期(默认值: 60s)。  
如果_period_设置为0，则忽略有效时间。在这种情况下，即使没有请求并且经过一段时间后，也会显示最后的平均值。  
在JSON中，对应的值是`requestMsec`和`responseMsec`。

*   **AMM**
    *   AMM[arithmetic mean](https://en.wikipedia.org/wiki/Arithmetic_mean) 是算术平均数。
*   **WMA**
    *   WMA[weighted moving average](https://en.wikipedia.org/wiki/Moving_average#Weighted_moving_average) 是加权移动平均数。

#### vhost\_traffic\_status\_histogram\_buckets

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_histogram\_buckets** _second_ … |
| **默认值** | \-  |
| **语境** | http, server, location |

`说明：` 设置要在直方图中使用的观察桶。  
默认情况下，如果不设置此指令，它将不起作用。  
参数_second_可以用小数位表示，最小值为0.001（1ms）。  
桶的最大尺寸为32。如果这个值不够，请在`src/ngx_http_vhost_traffic_status_node.h`中更改`NGX_HTTP_VHOST_TRAFFIC_STATUS_DEFAULT_BUCKET_LEN`对应的值。

例如：

*   **vhost\_traffic\_status\_histogram\_buckets** `0.005` `0.01` `0.05` `0.1` `0.5` `1` `5` `10`
    *   观察桶是\[5ms 10ms 50ms 1s 5s 10s\]。
*   **vhost\_traffic\_status\_histogram\_buckets** `0.005` `0.01` `0.05` `0.1`
    *   观察桶是\[5ms 10ms 50ms 1s\]。

`注意：` 默认情况下，如果不设置此指令，则直方图统计不起作用。  
使用指令`vhost_traffic_status_dump`恢复的直方图不受指令`vhost_traffic_status_histogram_buckets`对存储桶的更改的影响。  
因此，在通过`vhost_traffic_status_histogram_buckets`指令更改存储桶之前，必须首先删除zone或dump文件。  
与上面类似，在第一次使用直方图时也需要删除dump文件。

#### vhost\_traffic\_status\_bypass\_limit

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_bypass\_limit** <on\|off> |
| **默认值** | off |
| **语境** | http, server, location |

`说明：` 启用或禁用绕过`vhost_traffic_status_limit`指令。  
如果启用此选项，将绕过限制功能。如果通过`/status`访问状态网页，而希望不考虑`vhost_traffic_status_limit`指令对它的限制，则这一点非常有用，使用如下的配置：

```Nginx
http {
    vhost_traffic_status_zone;

    ...

    server {

        ...

        location /status {
            vhost_traffic_status_bypass_limit on;
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }
    }
}
```

#### vhost\_traffic\_status\_bypass\_stats

| \-  | \-  |
| --- | --- |
| **语法** | **vhost\_traffic\_status\_bypass\_stats** <on\|off> |
| **默认值** | off |
| **语境** | http, server, location |

`说明：` 启用或禁用绕过vhost\_traffic\_status。  
如果启用此选项，将绕过流量状态统计功能。也就是说，它被排除在流量状态统计之外。  
如果需要在像`/status`这样的状态网页中忽略请求，可以使用如下的设置：

```Nginx
http {
    vhost_traffic_status_zone;

    ...

    server {

        ...

        location /status {
            vhost_traffic_status_bypass_stats on;
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }
    }
}
```

### 17、另请参阅

*   Stream traffic [status](https://so.csdn.net/so/search?q=status&spm=1001.2101.3001.7020)
    
    *   [nginx-module-sts](https://github.com/vozlt/nginx-module-sts)
    *   [nginx-module-stream-sts](https://github.com/vozlt/nginx-module-stream-sts)
*   Prometheus
    
    *   [nginx-vts-exporter](https://github.com/hnlq715/nginx-vts-exporter)
*   System protection
    
    *   [nginx-module-sysguard](https://github.com/vozlt/nginx-module-sysguard)

### 18、待办事项

### 19、捐赠

[![License](assets/1710165941-9cb2ba1170ac8e25fd46ca175aa373ef.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=PWWSYKQ9VKH38&lc=KR&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)

### 20、作者

YoungJoo.Kim(김영주) \[[vozltx@gmail.com](mailto:vozltx@gmail.com)\]
