## 说明

nightingale 可以使用 helm 方式部署，但是作为优先级较高的应用，公司依赖其进行全局的应用状态管理，应该尽量减少其依赖组件，控制其承载平台带来的风险因素。
nightingale 选用 docker-compose 部署，实现较好的环境隔离、具有较高的可移植性，可以降低运维难度。
## 架构

在这个架构下，夜莺把监控数据的采集、传输也做了，夜莺进程有两个角色，一个是作为告警引擎，一个是作为数据转发的 pushgateway，这里首先需要一个时序库，可以使用 Prometheus 或 VictoriaMetrics（推荐）。夜莺接收到数据之后会通过 remote write 方式转发给时序库。
![](attachments/完整架构.png)
案例中同时举例了指标和日志两种数据的处理流程。
- 指标使用 [Categraf](https://github.com/ccfos/nightingale) 采集（就是那个猫爪样式的图标），推送到夜莺，夜莺把数据转存到时序库（此处以 VictoriaMetrics 举例，也可以写入 Prometheus 等其他时序库），之后把 VictoriaMetrics 作为一个数据源接入夜莺
- 日志使用 [Vector](https://vector.dev/) 采集推送给 ElasticSearch，然后把 ElasticSearch 作为一个数据源接入夜莺


如果只是把夜莺当做页面化的告警引擎，其架构如下：
![](attachments/告警架构.png)

这个架构下，夜莺就类似 Grafana（Grafana 侧重看图，夜莺侧重告警），可以接入多种不同的数据源，比如 Prometheus、VictoriaMetrics、M3DB、ElasticSearch、Loki、TDEngine 等等，在夜莺中配置管理告警规则，夜莺周期性去查询各个存储，判定异常数据，产生告警事件，然后把告警事件通过钉钉、企微、邮件等方式发出。

## 部署
使用 docker-compose 方式部署，作为系统中的告警工具
```bash
wget https://github.com/ccfos/nightingale/releases/download/v6.7.3/n9e-v6.7.3-linux-amd64.tar.gz
tar -xvf n9e-v6.7.3-linux-amd64.tar.gz --strip-components=1
rm -rf n9e-v6.7.3-linux-amd64.tar.gz

cd compose-bridge/
```

修改其中的 docker-compose 文件；因为外接数据源所以注释掉了其中的 prom，vm；
而 categraf 只抓取了本宿主机的部分指标，可以考虑配置接入已有的 prom，也可以考虑安装 node-exporter、process-exporter
```yaml
version: "3.7"

networks:
  nightingale:
    driver: bridge

services:
  mysql:
    image: "mysql:8"
    container_name: mysql
    hostname: mysql
    restart: always
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 1234
    volumes:
      - ./mysqldata:/var/lib/mysql/
      - ../initsql:/docker-entrypoint-initdb.d/
      - ./etc-mysql/my.cnf:/etc/my.cnf
    networks:
      - nightingale
    ports:
      - "3306:3306"

  redis:
    image: "redis:6.2"
    container_name: redis
    hostname: redis
    restart: always
    environment:
      TZ: Asia/Shanghai
    networks:
      - nightingale
    ports:
      - "6379:6379"

#Ibex 是告警自愈功能依赖的模块，提供一个批量执行命令的通道，可以做到在告警的时候自动去目标机器执行脚本

  ibex:
    image: flashcatcloud/ibex:v1.2.0
    container_name: ibex
    hostname: ibex
    restart: always
    environment:
      GIN_MODE: release
      TZ: Asia/Shanghai
      WAIT_HOSTS: mysql:3306
    volumes:
      - ./etc-ibex:/app/etc
    networks:
      - nightingale
    ports:
      - "10090:10090"
      - "20090:20090"
    depends_on:
      - mysql
    command: >
      sh -c "/app/ibex server"

  nightingale:
    image: flashcatcloud/nightingale:7.0.0-beta.2.0.1
    container_name: nightingale
    hostname: nightingale
    restart: always
    environment:
      GIN_MODE: release
      TZ: Asia/Shanghai
      WAIT_HOSTS: mysql:3306, redis:6379
    volumes:
      - ./etc-nightingale:/app/etc
    networks:
      - nightingale
    ports:
      - "17000:17000"
    depends_on:
      - mysql
      - redis
        #      - victoriametrics
    command: >
      sh -c "/app/n9e"

```

## 配置说明

### 配置告警规则

  略
  
### 配置告警通知

通知媒介：可以认为是一个对外的通知工具的使用方式。
联系方式：可以认为是使用上述通知媒介的联系人的联系方式。
用户管理：需要一个使用以上联系方式的用户，它存在于某个团队，通知的时候会指定这个团队，然后这个用户负责这个团队的告警通知
团队管理：告警只能发给团队，不能发给个人，所以要想收告警，必须要先有一个团队，它可以归属在某个业务组下
#### 创建钉钉机器人

首先创建一个钉钉群，然后进入群设置，找到智能群助手，点击【添加机器人】，找到【自定义】，如图：

![|800](attachments/Pasted%20image%2020240507120531.png)

进入自定义机器人页面，点击添加，给机器人取个名字，其次就是安全设置，这是钉钉新加的功能，老版本钉钉无需安全设置的，有三种安全设置方法，这里我们选择自定义关键字的方式：

![|800](attachments/Pasted%20image%2020240507120623.png)

自定义关键字里写“20”，啥意思呢？就是说，这个钉钉机器人提供了一个 webhook url 地址，夜莺发消息的时候就调用这个 url，但是，钉钉为了安全考虑，不能让发送方随随便便就发送，自定义了一个关键字“20”，这就需要夜莺发给钉钉的消息每次都必须带上“20”这个关键字，否则钉钉就拒收了。

为啥使用“20”作为关键字呢？因为告警消息里一定会有日期，比如 2020-09-09 12:12:12 年份里必然带有“20”这个字符串，所以，正常的告警消息一定是可以通过校验认证的。
也可以添加自定义的其他的关键字（需告警消息中存在），关键字之间是“或”关系。

> [!info]
> 目前夜莺不支持其他的钉钉认证方式，只能选择关键字认证方式

注意保存该页面中的 token

#### 创建 Nightingale 用户

在用户管理页面，以管理员身份创建一个用户，把刚才记录的 token 填入选择的 dingtalk_robot_token 联系方式中, 未来在告警中指定的某个团队的告警通知会由这个用户使用 dingtalk-token 发布到通知群中。
![|800](attachments/Pasted%20image%2020240507135435.png)

创建团队，并将以上的 dingtalk robot 加入此组。

![](attachments/Pasted%20image%2020240507141434.png)

#### 告警规则设置
在新建的告警规则中，通过通知配置指定通知方式：
![](attachments/Pasted%20image%2020240507141746.png)


### DEUBG
钉钉告警推送失败的日志检查

```bash
2024-05-07 09:46:15.853768 DEBUG eval/eval.go:198 rule_eval:alert-2-6 query:{PromQl:up{service= "rocketchat-rocketchat"} == 1 Severity:2}, value:up{cluster="monitor", instance="10.42.169.118:9100", job="kubernetes-service-endpoints", node="test-sys-lab-06", pod="rocketchat-rocketchat-757b6767c-25mnr", prometheus="cattle-monitoring-system/rancher-monitoring-prometheus", prometheus_replica="prometheus-rancher-monitoring-prometheus-0", service="rocketchat-rocketchat"} => 1 @[1715046375.851]
2024-05-07 09:46:15.854004 DEBUG process/process.go:326 rule_eval:alert-2-6 event:&{Id:0 Cate:prometheus Cluster:fromtest DatasourceId:2 GroupId:1 GroupName:Default Busi Group Hash:ca3ed2b8e6607bb2d181a03a0a7f2202 RuleId:6 RuleName:long RuleNote: RuleProd:metric RuleAlgo: Severity:2 PromForDuration:60 PromQl:up{service= "rocketchat-rocketchat"} == 1 RuleConfig:{"queries":[{"prom_ql":"up{service= \"rocketchat-rocketchat\"} == 1","severity":2}]} RuleConfigJson:map[queries:[map[prom_ql:up{service= "rocketchat-rocketchat"} == 1 severity:2]]] PromEvalInterval:30 Callbacks: CallbacksJSON:[] RunbookUrl: NotifyRecovered:1 NotifyChannels:7a3a90413403193282ae673d8da8e3501e6dc45c3a699a00500c771f955068dc NotifyChannelsJSON:[7a3a90413403193282ae673d8da8e3501e6dc45c3a699a00500c771f955068dc] NotifyGroups:2 NotifyGroupsJSON:[2] NotifyGroupsObj:[] TargetIdent: TargetNote: TriggerTime:1715046375 TriggerValue:1 TriggerValues: Tags:__name__=up,,cluster=monitor,,instance=10.42.169.118:9100,,job=kubernetes-service-endpoints,,node=test-sys-lab-06,,pod=rocketchat-rocketchat-757b6767c-25mnr,,prometheus=cattle-monitoring-system/rancher-monitoring-prometheus,,prometheus_replica=prometheus-rancher-monitoring-prometheus-0,,rulename=long,,service=rocketchat-rocketchat TagsJSON:[__name__=up cluster=monitor instance=10.42.169.118:9100 job=kubernetes-service-endpoints node=test-sys-lab-06 pod=rocketchat-rocketchat-757b6767c-25mnr prometheus=cattle-monitoring-system/rancher-monitoring-prometheus prometheus_replica=prometheus-rancher-monitoring-prometheus-0 rulename=long service=rocketchat-rocketchat] TagsMap:map[__name__:up cluster:monitor instance:10.42.169.118:9100 job:kubernetes-service-endpoints node:test-sys-lab-06 pod:rocketchat-rocketchat-757b6767c-25mnr prometheus:cattle-monitoring-system/rancher-monitoring-prometheus prometheus_replica:prometheus-rancher-monitoring-prometheus-0 rulename:long service:rocketchat-rocketchat] Annotations:{} AnnotationsJSON:map[] IsRecovered:false NotifyUsersObj:[] LastEvalTime:1715046375 LastSentTime:0 NotifyCurNumber:0 FirstTriggerTime:0 ExtraConfig:<nil> Status:0 Claimant: SubRuleId:0 ExtraInfo:[]} fire
2024-05-07 09:46:15.854197 INFO dispatch/log.go:20 event(ca3ed2b8e6607bb2d181a03a0a7f2202 triggered) push_queue: rule_id=6 sub_id:0 cluster:fromtest [__name__=up cluster=monitor instance=10.42.169.118:9100 job=kubernetes-service-endpoints node=test-sys-lab-06 pod=rocketchat-rocketchat-757b6767c-25mnr prometheus=cattle-monitoring-system/rancher-monitoring-prometheus prometheus_replica=prometheus-rancher-monitoring-prometheus-0 rulename=long service=rocketchat-rocketchat]1@1715046375 
2024-05-07 09:46:15.939655 INFO dispatch/log.go:20 event(ca3ed2b8e6607bb2d181a03a0a7f2202 triggered) consume: rule_id=6 sub_id:0 cluster:fromtest [__name__=up cluster=monitor instance=10.42.169.118:9100 job=kubernetes-service-endpoints node=test-sys-lab-06 pod=rocketchat-rocketchat-757b6767c-25mnr prometheus=cattle-monitoring-system/rancher-monitoring-prometheus prometheus_replica=prometheus-rancher-monitoring-prometheus-0 rulename=long service=rocketchat-rocketchat]1@1715046375 
2024-05-07 09:46:15.950442 DEBUG dispatch/dispatch.go:231 no sender for channel: 7a3a90413403193282ae673d8da8e3501e6dc45c3a699a00500c771f955068dc
```

 判断是当前设置的通讯方式或者通讯用户不正确，重新调整配置，不需要自行创建媒介和联系方式，使用其中已经存在的钉钉的方式就好。

## 告警规则明细

![3.告警规则](3.告警规则.md)