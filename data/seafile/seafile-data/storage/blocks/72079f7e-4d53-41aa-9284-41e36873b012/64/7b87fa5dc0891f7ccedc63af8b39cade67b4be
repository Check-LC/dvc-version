# 思路说明

## 代码来源
[Blobstore Example](https://github.com/devops-ia/terraform-nexus-blobstore) Nexus 每个重要功能部分的示例在不同仓库

## 结构说明

根
  env--申明区分管理不同环境
      目标集群： test01 -- 被管理集群（test、sys、dev）
        app01--被管理程序
          具体事件 example01
          具体事件 example02
  modules
    app01--被管理程序
      module01
      module02


## 原则
### 执行
- 最终 main 文件引用目标 module 即可 
- 多个模块，注释其他模块。保留目标模块执行。
- (需要注释不期望执行的模块的所有有关声明文件下的有关部分：variables、outputs、main、terraform.tfvars)
- 注意变量的及时更新到 terraform.tfvars

### moudules
- 存放模块化代码，便于重用，不易冲突
- 可读性强，便于管理

## 文件描述
### main.tf
- 根下 main 文件引用目标 module
- module下 用于描述资源的主文件

### version.tf
- 记录资源状态 ：terraform.tfstate文件保存了所有由Terraform管理的资源的当前状态。这包括资源的ID、属性以及与底层基础设施的映射关系。当Terraform执行计划、创建、更新、删除操作时，它会更新这个文件，以反映最新的基础设施状态
- 确保一致性 ：Terraform使用这个文件来确保其操作的一致性。在每次执行terraform apply或terraform destroy等命令时，Terraform会加载这个状态文件，并基于当前状态执行操作。这有助于避免资源的重复创建或意外删除
- 在多个团队成员管理云基础设施的协作环境中，将 terraform.tfstate 存储在本地变得非常具有挑战性。为了解决此问题，Terraform 提供了一种名为“远程后端”的功能，可用于在共享位置存储状态文件。某些后端在运行 plan 或 apply 操作时支持 tfstate 锁定，以确保数据完整性并防止冲突

###  variable.tf
- 定义变量类型，描述变量的文件

### variables.tfvars
- 这是定义变量值的默认文本文件，某些变量也可以视需要放置在系统的环境变量 (实际使用或许需要考虑这个密码的变量获取于vault的datasource)
- 如果不定义在默认var文件，或不使用参数进行 var 文件指定，会在终端提示交互输入
- 也可考虑将变量写在 main 文件 local 语法块下

### outputs.tf
- provider 可以输出的信息，设置为变量，方便使用

## 问题：
- 出现状态不同步
- 较长时间之后再次维护某个流程，不能确保状态一致